const express = require('express');
const app = express();

app.use(express.json());

const LOCK_DURATION = 60 * 1000; // 1 minute lock duration in milliseconds

// In-memory seat data
// Possible statuses: 'available', 'locked', 'booked'
// Locked seats also store lock expiration time and timer
const seats = {
  "1": { status: "available" },
  "2": { status: "available" },
  "3": { status: "available" },
  "4": { status: "available" },
  "5": { status: "available" },
};

// Helper function to unlock a seat after timeout
function unlockSeat(seatId) {
  if (seats[seatId] && seats[seatId].status === "locked") {
    seats[seatId].status = "available";
    delete seats[seatId].lockExpiresAt;
    if (seats[seatId].timeout) {
      clearTimeout(seats[seatId].timeout);
      delete seats[seatId].timeout;
    }
  }
}

// Endpoint to get seat statuses
app.get('/seats', (req, res) => {
  const result = {};
  for (const [seatId, data] of Object.entries(seats)) {
    result[seatId] = { status: data.status };
  }
  res.status(200).json(result);
});

// Endpoint to lock a seat
app.post('/lock/:seatId', (req, res) => {
  const seatId = req.params.seatId;
  const seat = seats[seatId];

  if (!seat) {
    return res.status(404).json({ message: "Seat not found." });
  }

  if (seat.status === "available") {
    seat.status = "locked";
    seat.lockExpiresAt = Date.now() + LOCK_DURATION;

    // Set timeout to auto-unlock seat after 1 minute
    seat.timeout = setTimeout(() => {
      unlockSeat(seatId);
    }, LOCK_DURATION);

    return res.status(200).json({ message: `Seat ${seatId} locked successfully. Confirm within 1 minute.` });
  } else if (seat.status === "locked") {
    return res.status(400).json({ message: "Seat is already locked." });
  } else if (seat.status === "booked") {
    return res.status(400).json({ message: "Seat is already booked." });
  }
});

// Endpoint to confirm a locked seat
app.post('/confirm/:seatId', (req, res) => {
  const seatId = req.params.seatId;
  const seat = seats[seatId];

  if (!seat) {
    return res.status(404).json({ message: "Seat not found." });
  }

  if (seat.status === "locked") {
    // Confirm booking
    seat.status = "booked";

    // Clear the auto-unlock timer
    if (seat.timeout) {
      clearTimeout(seat.timeout);
      delete seat.timeout;
    }
    delete seat.lockExpiresAt;

    return res.status(200).json({ message: `Seat ${seatId} booked successfully!` });
  } else if (seat.status === "available") {
    return res.status(400).json({ message: "Seat is not locked and cannot be booked." });
  } else if (seat.status === "booked") {
    return res.status(400).json({ message: "Seat is already booked." });
  }
});

// Start server
const PORT = 3000;
app.listen(PORT, () => {
  console.log(`Ticket booking system running on http://localhost:${PORT}`);
});
